// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema




generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  // id value here should be mapped to _id in the db
  // @db.ObjectId indicates that the id field in the db
  // should be of type ObjectId
  // all the @ combined are called a decorator, this is from the 
  // prisma docs to use with a mongodb db
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

// mapping User model to the userId in this model, and referencing
// the id from the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // id value here should be mapped to _id in the db
  // @db.ObjectId indicates that the id field in the db
  // should be of type ObjectId
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String?
  firstName         String?
  lastNames         String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  accounts          Account[]
  sessions          Session[]
  roles             Role[]  

  // targetting the field 'clinicIDs' and referencing 'id' from Clinic schema
  clinicIDs String[]  @db.ObjectId
  clinics   Clinic[]  @relation(fields: [clinicIDs], references: [id])
}

enum Role {
  SYSTEMADMIN
  CLINICOWNER
  CLINICEMPLOYEE
  INVENTORYPERMISSION
  SOFTWAREARCHITECT
  SURGEON
}


model Clinic {
  // below 3 created by prisma (id of store etc)
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  name               String
  clinicLocationTag  String

  // targetting the field 'userIDs' and referencing 'id' from User schema
  userIDs            String[]  @db.ObjectId
  users              User[]    @relation(fields: [userIDs], references: [id])

  productInventories ProductInventory[]
}


model Product {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  upc                String
  name               String    @unique
  description        String
  detail             String?
  manufacturer       String
  vendor             String?
  type               String?

  productInventories ProductInventory[]

  
}

model ProductInventory {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  
  clinicId          String    @db.ObjectId
  clinic            Clinic    @relation(fields: [clinicId], references: [id])
 
  productId         String    @db.ObjectId
  product           Product   @relation(fields: [productId], references: [id])
  
  quantity          Int?
  
  boxId             String?   @db.ObjectId
  box               ProductInventory? @relation("BoxContainsItems", fields: [boxId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  boxItems          ProductInventory[] @relation("BoxContainsItems")
}


// at end run npx prisma generate before using query
// then npx prisma db push
// npx prisma migrate reset to delete all data
